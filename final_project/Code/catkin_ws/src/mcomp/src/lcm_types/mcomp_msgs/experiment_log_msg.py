"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class experiment_log_msg(object):
    __slots__ = ["timestamp", "type", "vehicle", "location", "vehicle_location", "vehicle_orientation", "content"]

    def __init__(self):
        self.timestamp = 0.0
        self.type = 0
        self.vehicle = ""
        self.location = [ 0.0 for dim0 in range(2) ]
        self.vehicle_location = [ 0.0 for dim0 in range(2) ]
        self.vehicle_orientation = 0.0
        self.content = ""

    def encode(self):
        buf = BytesIO()
        buf.write(experiment_log_msg._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dq", self.timestamp, self.type))
        __vehicle_encoded = self.vehicle.encode('utf-8')
        buf.write(struct.pack('>I', len(__vehicle_encoded)+1))
        buf.write(__vehicle_encoded)
        buf.write(b"\0")
        buf.write(struct.pack('>2d', *self.location[:2]))
        buf.write(struct.pack('>2d', *self.vehicle_location[:2]))
        buf.write(struct.pack(">d", self.vehicle_orientation))
        __content_encoded = self.content.encode('utf-8')
        buf.write(struct.pack('>I', len(__content_encoded)+1))
        buf.write(__content_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != experiment_log_msg._get_packed_fingerprint():
            raise ValueError("Decode error")
        return experiment_log_msg._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = experiment_log_msg()
        self.timestamp, self.type = struct.unpack(">dq", buf.read(16))
        __vehicle_len = struct.unpack('>I', buf.read(4))[0]
        self.vehicle = buf.read(__vehicle_len)[:-1].decode('utf-8', 'replace')
        self.location = struct.unpack('>2d', buf.read(16))
        self.vehicle_location = struct.unpack('>2d', buf.read(16))
        self.vehicle_orientation = struct.unpack(">d", buf.read(8))[0]
        __content_len = struct.unpack('>I', buf.read(4))[0]
        self.content = buf.read(__content_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if experiment_log_msg in parents: return 0
        tmphash = (0x556a571e2345ad53) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if experiment_log_msg._packed_fingerprint is None:
            experiment_log_msg._packed_fingerprint = struct.pack(">Q", experiment_log_msg._get_hash_recursive([]))
        return experiment_log_msg._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

